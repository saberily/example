参考：https://www.jianshu.com/p/78a5afd0c597
官方文档：https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/
kubeadm参考：https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/

yum版本查看：
yum list installed
yum list packet-name --showduplicates
yum remove packet-name

系统：centos7
k8s

切换root权限
su root

使用阿里yum源
wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 
yum makecache

关闭防火墙
systemctl stop firewalld & systemctl disable firewalld

关闭Linux的Swap机制（关闭后可使用top命令查看）
临时关闭：swapoff -a
永久关闭：编辑/etc/fstab，注释掉包含swap的那一行即可

关闭SeLinux
setenforce 0

添加阿里云docker仓库
yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
yum makecache

安装docker
#yum install docker-ce -y
yum install -y docker-ce-17.06.0.ce-1.el7.centos
启动docker并设置开机启动
systemctl start docker & systemctl enable docker
验证启动成功
docker run hello-world

配置K8S的yum源：
cat <<EOF > /etc/yum.repos.d/kubernetes.repo

[kubernetes]

name=Kubernetes

baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64

enabled=1

gpgcheck=0

repo_gpgcheck=0

gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg

        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg

EOF

安装K8S组件
#yum install -y kubelet kubeadm kubectl
yum install -y kubeadm-1.10.0-0 kubectl-1.10.0-0 kubelet-1.10.0-0 kubernetes-cni

查看docker和kubelet的cgroup driver是否一致
docker info | grep -i cgroup
cat /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
不一致则执行：
sed -i "s/cgroup-driver=systemd/cgroup-driver=cgroupfs/g" /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
systemctl daemon-reload

启动kubelet
systemctl enable kubelet && systemctl start kubelet

导入自定义镜像
将镜像与该脚本放置同一目录，执行即可导入Docker镜像。
运行docker images查看镜像是否导入成功。

关机复制3个同样的k8s虚拟环境
hostname修改
编辑/etc/hostname，将hostname修改为k8s-node1 
编辑/etc/hosts，追加内容 IP1 k8s-node1 
                        IP2 k8s-node2
                        IP3 k8s-node3

修改防火墙设置
vi /etc/sysctl.d/k8s.conf 
    net.bridge.bridge-nf-call-ip6tables = 1
    net.bridge.bridge-nf-call-iptables = 1
sysctl -p /etc/sysctl.d/k8s.conf 

在Master主节点（k8s-node1）上执行:
#kubeadm init --pod-network-cidr=192.168.0.0/16 --kubernetes-version=v1.10.0 --apiserver-advertise-address=IP1
kubeadm init --pod-network-cidr=192.168.0.0/16 --kubernetes-version=v1.10.0 --apiserver-advertise-address=192.168.0.102
含义：
1.选项--pod-network-cidr=192.168.0.0/16表示集群将使用Calico网络，这里需要提前指定Calico的子网范围
2.选项--kubernetes-version=v1.10.0指定K8S版本，这里必须与之前导入到Docker镜像版本v1.10.0一致，否则会访问谷歌去重新下载K8S最新版的Docker镜像
3.选项--apiserver-advertise-address表示绑定的网卡IP，这里一定要绑定前面提到的enp0s8网卡，否则会默认使用enp0s3网卡
4.若执行kubeadm init出错或强制终止，则再需要执行该命令时，需要先执行kubeadm reset重置

集群初始化成功，根据提示执行如下命令
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
（提示会打印类似如下的命令后面在其他节点执行可以用来将其他节点加入集群
kubeadm join 192.168.0.102:6443 --token lupnqs.qmhmxn6zii8giuyc --discovery-token-ca-cert-hash sha256:62f27d4f7598250512b07bc7b2baf3e3cc560c4dcf0c6cc4410724adacef9b96）

查看pod状态
kubectl get pod -n kube-system

下载calico.yaml文件，并将文件中的v3.1.4全部修改为docker images中的对应版本号级v3.1.0
wget https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/kubeadm/1.7/calico.yaml

使用calico.yaml创建网络
kubectl apply -f calico.yaml

让pod可以被调度到master节点上
kubectl taint nodes --all node-role.kubernetes.io/master-

再其他节点执行主节点初始化成功时输出的kubeadm join命令，将节点加入集群

查看节点运行状态
kubectl get nodes
查看pod运行状态
kubectl get pods -n kube-system

问题：
[ERROR CRI]: unable to check if the container runtime at "/var/run/dockershim.sock" is running: fork/exec /usr/bin/crictl -r /var/run/dockershim.sock info: no such file or directory
解决：rm -f /usr/bin/crictl


k8s-dashboard
参考：https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/

kubernetes-dashboard.yaml
如下方式已经不可用
#wget https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml

在所有节点上导入镜像
#docker load < k8s.gcr.io#kubernetes-dashboard-amd64.tar